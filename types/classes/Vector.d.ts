export default class Vector {
    x: number;
    y: number;
    z: number;
    constructor(x?: number, y?: number, z?: number);
    set(vector: Vector): this;
    set(offset: [number?, number?, number?]): this;
    set(x?: number, y?: number, z?: number): this;
    copy(): Vector;
    add(vector: Vector): this;
    add(offset: [number?, number?, number?]): this;
    add(x: number, y: number, z: number): this;
    rem(vector: Vector): void;
    rem(params: [number, number?, number?]): void;
    sub(vector: Vector): this;
    sub(offset: [number?, number?, number?]): this;
    sub(x: number, y: number, z: number): this;
    mult(n: number): this;
    div(n: number): this;
    mag(): number;
    magSq(): number;
    dot(vector: Vector): number;
    dot(x?: number, y?: number, z?: number): number;
    cross(v: Vector): Vector;
    normalize(): this;
    limit(max: number): this;
    setMag(n: number): this;
    heading(): number;
    rotate(angle: number): this;
    angleBetween(vector: Vector): number;
    lerp(vector: Vector, amt?: number): this;
    lerp(x?: number, y?: number, z?: number, amt?: number): this;
    reflect(surfaceNormal: Vector): this;
    array(): [number, number, number];
    equals(vector: Vector): boolean;
    equals(params: [number?, number?, number?]): boolean;
    equals(x?: number, y?: number, z?: number): boolean;
    toString(): string;
}
